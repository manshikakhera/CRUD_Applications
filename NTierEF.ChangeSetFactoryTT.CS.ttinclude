<#+
// <copyright file="NTierEF.ChangeSetFactoryTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class ChangeSetFactoryTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string ClientBaseNamespace { get; set; }
    public string ModelNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}ChangeSetFactory.g.cs", EdmUtility.ModelName); }
        set { file = value; }
    }

    public ChangeSetFactoryTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null, string modelNamespace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.ClientBaseNamespace = "NTier.Client.Domain";
        this.ModelNamespace = modelNamespace;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ClientBaseNamespace))
        {
            throw new Exception("Missing property ClientBaseNamespace");
        }
        if (string.IsNullOrWhiteSpace(ModelNamespace))
        {
            throw new Exception("Missing property ModelNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ClientBaseNamespace, ModelNamespace + "." + EdmUtility.ModelName);
#>
namespace <#= this.Namespace #>
{
    public partial class <#= EdmUtility.ModelName #>ChangeSetFactory : ChangeSetFactory, I<#= EdmUtility.ModelName #>ChangeSetFactory
    {
        public <#= EdmUtility.ModelName #>ChangeSet CreateChangeSet(<#=string.Join(", ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => "IEnumerable<" + EdmUtility.Code.Escape(e.ElementType) + "> " + FirstCaseLow(EdmUtility.Code.Escape(e))).ToArray())#>)
        {
            // retrieve changes sets (modified entities)
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            var <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet.ElementType))#>ChangeSet = GetChangeSet(<#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>);
<#+
    }
#>

            // reduce entities (copy changed values)
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            var <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map = ReduceToModifications(<#=FirstCaseLow(EdmUtility.Code.Escape(entitySet.ElementType))#>ChangeSet);
<#+
    }

    if (EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Count() > 1)
    {
#>

            // fixup relations (replaces related entities with reduced entites)
            FixupRelations(
                <#=string.Join(", \n                ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => "CastToEntityTuple(" + FirstCaseLow(EdmUtility.Code.Escape(e)) + "Map)").ToArray())#>
            );
<#+
    }
#>

            var changeSet = new <#= EdmUtility.ModelName #>ChangeSet();

<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            if (<#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map.Count > 0) changeSet.<#=EdmUtility.Code.Escape(entitySet)#> = <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map.Select(e => e.ReducedEntity).ToList();
<#+
    }
#>

            return changeSet;
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }

    private string FirstCaseLow(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return value;
        }

        return value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
    }
}
#>
