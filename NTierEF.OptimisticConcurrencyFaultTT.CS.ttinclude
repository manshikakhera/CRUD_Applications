<#+
// <copyright file="NTierEF.OptimisticConcurrencyFaultTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class OptimisticConcurrencyFaultTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string BaseTypeFullName { get; set; }
    public string ModelBaseNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}\{0}OptimisticConcurrencyFault.g.cs", EdmUtility.ModelName); }
        set { file = value; }
    }

    public OptimisticConcurrencyFaultTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.BaseTypeFullName = "NTier.Common.Domain.OptimisticConcurrencyFault";
        this.ModelBaseNamespace = "NTier.Common.Domain.Model";
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(BaseTypeFullName))
        {
            throw new Exception("Missing property BaseTypeFullName");
        }
        if (string.IsNullOrWhiteSpace(ModelBaseNamespace))
        {
            throw new Exception("Missing property ModelBaseNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ModelBaseNamespace);
#>
namespace <#= Namespace + "." + EdmUtility.ModelName #>
{
    [Serializable]
    [DataContract]
    [KnownType("GetKnownTypes")]
    public partial class <#= EdmUtility.ModelName #>OptimisticConcurrencyFault : <#= BaseTypeFullName #>
    {
        public <#= EdmUtility.ModelName #>OptimisticConcurrencyFault(string message, IEnumerable<Entity> entities)
            : base(message, entities)
        {
        }

        private static Type[] GetKnownTypes()
        {
            var types = typeof(<#= EdmUtility.ModelName #>OptimisticConcurrencyFault).Assembly.GetTypes()
                .Where(x => x.Namespace == typeof(<#= EdmUtility.ModelName #>OptimisticConcurrencyFault).Namespace)
                .Where(x => typeof(Entity).IsAssignableFrom(x) )
                .Where(x => x.IsPublic)
                .Where(x => !x.IsAbstract)
                .ToArray();
            return types;
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
<#=String.Join(string.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }
}
#>
